-- Messing around with block meshes, Lua style.

pi = math.pi
sqrt = math.sqrt
sin = math.sin
cos = math.cos
atan = math.atan
atan2 = math.atan2

-- Number of cells in each patch.
nx = 32
ny = 32
nz = 32

-- Number of horizontal patches in each block.
npx = 10
npy = 10

-- Number of vertical patches in each block.
npz = 4

-- Inner and outer radii
R1 = 1
R2 = 1.1

-- Coordinate mappings for the 4 equatorial blocks, plus north and south.
function equatorial_J(x)
  X = tan(x.x)
  Y = tan(x.y)
  delta2 = 1.0 + X*X + Y*Y
  return tensor2.new(1, 0, 0,
                     -X*Y*math.sqrt(1+X*X)/delta2, (1+Y*Y)*math.sqrt(1.0+X*X)/delta2, 0,
                     0, 0, R2 - R1)
end
coords = {
  coord_mapping.new{name = 'equatorial block 1',
                    map_point = function(x)
                      return point.new(x.x,
                                       atan(x.y)*cos(x.x),
                                       R1 + (R2-R1)*x.z)
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'equatorial block 2',
                    map_point = function(x)
                      return point.new(x.x + 0.5*pi,
                                       atan(x.y)*cos(x.x),
                                       R1 + (R2-R1)*x.z)
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'equatorial block 3',
                    map_point = function(x)
                      return point.new(x.x + pi,
                                       atan(x.y)*cos(x.x),
                                       R1 + (R2-R1)*x.z)
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'equatorial block 4',
                    map_point = function(x)
                      return point.new(x.x + 1.5*pi,
                                       atan(x.y)*cos(x.x),
                                       R1 + (R2-R1)*x.z)
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'north block',
                    map_point = function(x)
                      tan_x = tan(x.x)
                      tan_y = tan(x.y)
                      return point.new(-atan2(x.x, x.y),
                                       atan(1.0/sqrt(tan_x^2 + tan_y^2)),
                                       R1 + (R2-R1)*x.z)
                    end,
                    jacobian = function(x)
                      X = tan(x.x)
                      Y = tan(x.y)
                      delta2 = 1.0 + X*X + Y*Y
                      return tensor2.new(-Y*(1+X*X)/(X*X+Y*Y), -X*(1+Y*Y)/(X*X+Y*Y), 0,
                                         -X/(1+X*X)/(delta2*sqrt(X*X+Y*Y)), -Y*(1+Y*Y)/(delta2*sqrt(X*X+Y*Y)), 0,
                                         0, 0, 1.0/(R2 - R1))
                    end},
  coord_mapping.new{name = 'south block',
                    map_point = function(x)
                      tan_x = tan(x.x)
                      tan_y = tan(x.y)
                      return point.new(-atan2(x.x, x.y),
                                       -atan(1.0/sqrt(tan_x^2 + tan_y^2)),
                                       R1 + (R2-R1)*x.z)
                    end,
                    jacobian = function(x)
                      X = tan(x.x)
                      Y = tan(x.y)
                      delta2 = 1.0 + X*X + Y*Y
                      return tensor2.new(Y*(1+X*X)/(X*X+Y*Y), X*(1+Y*Y)/(X*X+Y*Y), 0,
                                         X/(1+X*X)/(delta2*sqrt(X*X+Y*Y)), Y*(1+Y*Y)/(delta2*sqrt(X*X+Y*Y)), 0,
                                         0, 0, 1.0/(R2 - R1))
                    end},
}

-- Inverse coordinate mappings (irritating, but needed!)
function inv_equatorial_J(x)
  X = tan(x.x)
  Y = tan(x.y)
  delta2 = 1.0 + X*X + Y*Y
  return tensor2.new(1, 0, 0,
                     X*Y/(1+Y*Y), delta2 / ((1+Y*Y) * sqrt(1+X*X)), 0,
                     0, 0, 1/(R2 - R1))
end
inv_coords = {
  coord_mapping.new{name = 'equatorial block 1 inverse',
                    map_point = function(x)
                      return point.new(x.x,
                                       atan2(tan(x.y), cos(x.x)),
                                       (x.z - R1) / (R2 - R1))
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'equatorial block 2 inverse',
                    map_point = function(x)
                      return point.new(x.x - 0.5*pi,
                                       atan2(tan(x.y), cos(x.x)),
                                       (x.z - R1) / (R2 - R1))
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'equatorial block 3 inverse',
                    map_point = function(x)
                      return point.new(x.x - pi,
                                       atan2(tan(x.y), cos(x.x)),
                                       (x.z - R1) / (R2 - R1))
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'equatorial block 4 inverse',
                    map_point = function(x)
                      return point.new(x.x - 1.5*pi,
                                       atan2(tan(x.y), cos(x.x)),
                                       (x.z - R1) / (R2 - R1))
                    end,
                    jacobian = equatorial_J},
  coord_mapping.new{name = 'north block inverse',
                    map_point = function(x)
                      tan_x = tan(x.x)
                      tan_y = tan(x.y)
                      return point.new(-atan2(sin(x.x), tan_y),
                                       -atan2(cos(x.x), tan_y),
                                       (x.z - R1) / (R2 - R1))
                    end,
                    jacobian = function(x)
                      X = tan(x.x)
                      Y = tan(x.y)
                      delta2 = 1.0 + X*X + Y*Y
                      return tensor2.new(-Y / (1+X*X), -delta2*X / ((1+X*X)*sqrt(X*X+Y*Y)), X/(1+Y*Y),
                                         -X/(1+Y*Y), -delta2*Y / ((1+Y*Y)*sqrt(X*X+Y*Y)), 0,
                                         0, 0, 1/(R2 - R1))
                    end},
  coord_mapping.new{name = 'south block inverse',
                    map_point = function(x)
                      tan_x = tan(x.x)
                      tan_y = tan(x.y)
                      return point.new(atan2(sin(x.x), tan_y),
                                       -atan2(cos(x.x), tan_y),
                                       (x.z - R1) / (R2 - R1))
                    end,
                    jacobian = function(x)
                      X = tan(x.x)
                      Y = tan(x.y)
                      delta2 = 1.0 + X*X + Y*Y
                      return tensor2.new(Y / (1+X*X), delta2*X / ((1+X*X)*sqrt(X*X+Y*Y)), X/(1+Y*Y),
                                         -X/(1+Y*Y), delta2*Y / ((1+Y*Y)*sqrt(X*X+Y*Y)), 0,
                                         0, 0, 1/(R2 - R1))
                    end},
}
for i = 1,6 do
  coords[i].inverse = inv_coords[i]
end

-- Create the block mesh and add the 6 blocks.
mesh = blockmesh.new(mpi.COMM_WORLD, nx, ny, nz)
D = bbox.new{x1 = -math.pi/4, x2 = math.pi/4,
             y1 = -math.pi/4, y2 = math.pi/4,
             z1 = 0, z2 = 1}
for i = 1,6 do
  mesh:add_block{domain = D, coords = coords[i],
                 num_x_patches = npx, num_y_patches = npy, num_z_patches = npz}
end

-- Connect the equatorial blocks.
mesh:connect_blocks{block1_index = 1, block1_nodes = {2, 6, 7, 3},
                    block2_index = 2, block2_nodes = {1, 5, 8, 4}}
mesh:connect_blocks{block1_index = 2, block1_nodes = {2, 6, 7, 3},
                    block2_index = 3, block2_nodes = {1, 5, 8, 4}}
mesh:connect_blocks{block1_index = 3, block1_nodes = {2, 6, 7, 3},
                    block2_index = 4, block2_nodes = {1, 5, 8, 4}}
mesh:connect_blocks{block1_index = 4, block1_nodes = {2, 6, 7, 3},
                    block2_index = 1, block2_nodes = {1, 5, 8, 4}}

-- Connect the north pole.
mesh:connect_blocks{block1_index = 1, block1_nodes = {3, 7, 8, 4},
                    block2_index = 5, block2_nodes = {2, 6, 5, 1}}
mesh:connect_blocks{block1_index = 2, block1_nodes = {3, 7, 8, 4},
                    block2_index = 5, block2_nodes = {3, 7, 6, 2}}
mesh:connect_blocks{block1_index = 3, block1_nodes = {3, 7, 8, 4},
                    block2_index = 5, block2_nodes = {4, 8, 7, 3}}
mesh:connect_blocks{block1_index = 4, block1_nodes = {3, 7, 8, 4},
                    block2_index = 5, block2_nodes = {1, 5, 8, 4}}

-- Connect the south pole.
mesh:connect_blocks{block1_index = 1, block1_nodes = {2, 6, 5, 1},
                    block2_index = 6, block2_nodes = {3, 7, 8, 4}}
mesh:connect_blocks{block1_index = 2, block1_nodes = {2, 6, 5, 1},
                    block2_index = 6, block2_nodes = {2, 6, 7, 3}}
mesh:connect_blocks{block1_index = 3, block1_nodes = {2, 6, 5, 1},
                    block2_index = 6, block2_nodes = {1, 5, 6, 2}}
mesh:connect_blocks{block1_index = 4, block1_nodes = {2, 6, 5, 1},
                    block2_index = 6, block2_nodes = {4, 8, 5, 1}}

-- Finalize the mesh.
mesh:finalize()

print(mesh)

