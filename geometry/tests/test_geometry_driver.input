-- This tests the various geometry classes.

-- Make a coordinate mapping and try it out.
I = coord_mapping.new{name = "I",
                      map = function(self, x) return x end,
                      map_vector = function(self, x, v) return v end, 
                      jacobian = function(self, x) 
                                   return tensor2.new(1, 0, 0, 
                                                      0, 1, 0, 
                                                      0, 0, 1) 
                                 end,
                      inverse = "self"}
x = point.new(1, 2, 3)
v = vector.new(4, 5, 6)
print(I) 
print(I(x)) 
print(I(x, v)) 
print(I:jacobian(x)) 
print(I:inverse()) 
print(I:metric(x))

-- Try out the shake-n-bake signed distance functions.
plane = sd_func.plane{normal = vector.new(1, 0, 0),
                      point = point.new(0, 0, 0)}
cyl = sd_func.cylinder{point = point.new(0, 0, 0),
                       radius = 1,
                       orientation = "inward"}
sph = sd_func.sphere{point = point.new(0, 0, 0),
                     radius = 1,
                     orientation = "inward"}
union = sd_func.union{plane, cyl, sph}
int = sd_func.intersection{plane, cyl, sph}
diff = sd_func.difference(cyl, sph)
print(plane, cyl, sph, union, int, diff)
x = point.new(0.5, 0.5, 0.5)
print(plane(x), cyl(x), sph(x), union(x), int(x), diff(x))
print(plane:grad(x), cyl:grad(x), sph:grad(x), union:grad(x), int:grad(x), diff:grad(x))
print(plane:project(x), cyl:project(x), sph:project(x), union:project(x), int:project(x), diff:project(x))

-- Now let's make our own plane function.
plane1 = sd_func.new{name = "my plane", 
                     value = function(self, x)
                               n = vector.new(1, 0, 0)
                               x0 = point.new(0, 0, 0)
                               D = x - x0
                               return vector.dot(D, n)
                             end,
                     grad = function(self, x) return vector.new(-1, 0, 0) end,
                    }

print(plane1)
plane1.name = 'your plane'
assert(plane1.name == 'your plane')
print(plane1(x))
print(plane1:grad(x))
print(plane1:project(x))

-- Now let's make a plane that moves to the right with speed 1.
plane2 = sdt_func.new{name = "my moving plane", 
                      value = function(self, x, t)
                                n = vector.new(1, 0, 0)
                                x0 = point.new(t, 0, 0)
                                D = x - x0
                                return vector.dot(D, n)
                              end,
                      grad = function(self, x, t)
                               return vector.new(t-1, 0, 0)
                             end
                     }

print(plane2)
plane2.name = 'your moving plane'
assert(plane2.name == 'your moving plane')
print(plane2(x, 1))
print(plane2:grad(x, 1))
print(plane2:project(x, 1))

-- Polygon.
square = polygon.new({point2.new(0,0), point2.new(1,0), point2.new(1,1), point2.new(0,1)})
square2 = polygon.new(point2.new(0,0), point2.new(1,0), point2.new(1,1), point2.new(0,1))
print(square, square2)
assert(#square.vertices == 4)
assert(#square2.vertices == 4)
assert(reals_equal(square.area, 1.0))
assert(reals_equal(square2.area, 1.0))
assert(reals_equal(point2.distance(square.centroid, point2.new(0.5, 0.5)), 0))

-- Polyhedron.
v1 = point.new(0,0,0)
v2 = point.new(1,0,0)
v3 = point.new(1,1,0)
v4 = point.new(0,1,0)
v5 = point.new(0,0,1)
v6 = point.new(1,0,1)
v7 = point.new(1,1,1)
v8 = point.new(0,1,1)
cube = polyhedron.new({v1,v2,v3,v4,v5,v6,v7,v8}, -- vertices
                      {{1,5,8,4},{2,3,7,6},      -- -/+ x faces
                       {1,2,6,5},{3,4,8,7},      -- -/+ y faces
                       {4,3,2,1},{5,6,7,8}})     -- -/+ z faces
print(cube)
assert(#cube.vertices == 8)
assert(#cube.faces == 6)
assert(reals_equal(cube.volume, 1.0))
assert(reals_equal(point.distance(cube.centroid, point.new(0.5, 0.5, 0.5)), 0.0))

-- Uniform cartesian meshes.
box = bbox.new{x1 = 0, x2 = 1, y1 = 0, y2 = 1, z1 = 0, z2 = 1}
mesh = unimesh.new{comm = mpi.COMM_WORLD, bbox = box,
                   npx = 2, npy = 2, npz = 2, 
                   nx = 10, ny = 10, nz = 10}
print(mesh.bbox)
sp = mesh.spacings
assert(reals_equal(sp[1], 0.05))
assert(reals_equal(sp[2], 0.05))
assert(reals_equal(sp[3], 0.05))
ex = mesh.extents
assert(ex[1] == 2)
assert(ex[2] == 2)
assert(ex[3] == 2)
ps = mesh.patch_size
assert(ps[1] == 10)
assert(ps[2] == 10)
assert(ps[3] == 10)
patches = mesh.patches
assert(#patches <= 8)

-- Polyhedral meshes.
mesh1 = polymesh.uniform{comm = mpi.COMM_WORLD, nx = 10, ny = 10, nz = 10, bbox = box}
print(mesh1.num_cells, mesh1.num_faces, mesh1.num_edges, mesh1.num_nodes)
mesh2 = polymesh.uniform{comm = mpi.COMM_WORLD, rank = 0, nx = 10, ny = 10, nz = 10, bbox = box}
if mpi.rank == 0 then
  assert(mesh2.num_cells == 1000)
end

xs = {0.1, 0.2, 0.3, 0.4, 0.5}
ys = xs
zs = xs
mesh3 = polymesh.rectilinear{comm = mpi.COMM_WORLD, xs = xs, ys = ys, zs = zs}
mesh4 = polymesh.rectilinear{comm = mpi.COMM_WORLD, rank = 0, xs = xs, ys = ys, zs = zs}

-- Planar polymeshes.
quad_ppm = planar_polymesh.quad{nx = 10, ny = 10, bbox = box}
assert(quad_ppm.num_cells == 100)
print(quad_ppm, quad_ppm.num_edges, quad_ppm.num_nodes)

hex_ppm = planar_polymesh.hex{radius = 5, h = 0.1}
print(hex_ppm, hex_ppm.num_cells, hex_ppm.num_edges, hex_ppm.num_nodes)

-- Column meshes.
cmesh1 = colmesh.quad{comm = mpi.COMM_WORLD, bbox = bbox.new{x1 = 0, x2 = 1, y1 = 0, y2 = 1, z1 = 0, z2 = 1}, nx = 10, ny = 10, nz = 10}
cmesh2 = colmesh.hex{comm = mpi.COMM_WORLD, radius = 8, h = 0.1, nz = 10, z1 = 0, z2 = 1}

-- Point cloud (and tags).
pcloud = point_cloud.new(mpi.COMM_WORLD, {point.new(0, 0, 0), point.new(1, 0, 0), point.new(0, 1, 0), point.new(0, 0, 1)})
assert(pcloud.num_points == 4)
assert(pcloud.num_ghosts == 0)
print(pcloud.tags)
assert(not pcloud.tags:has_tag('nope'))
assert(not pcloud.tags:tag('nope'))
pcloud.tags:create_tag('firsty', {0})
assert(pcloud.tags:has_tag('firsty'))

-- Force probe garbage collection.
collectgarbage("collect")
