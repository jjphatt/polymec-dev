#!/usr/bin/env bash

# This script creates a build directory and sticks a config.sh script into it.
# Then config.sh can be edited and run within the build directory.

# Print usage info.
if [ "$1" = "" ]; then
  echo "Usage: bootstrap build_dir"
  exit 1
fi

# Create the build directory if it doesn't exist.
if [ ! -d $1 ]; then
  mkdir -p $1
fi 

# Copy our template config script into place.
echo "SOURCE_DIR=$PWD" > $1/config.sh
cat <<EOT >> $1/config.sh
# ^^^^^^ location of polymec source code.

# config.sh -- A CMake configuration script.
# Edit this file to change the parameters in your build. Uncomment exactly one 
# value for each parameter.

#-----------------------------------------------------------------------------
#                             Installation prefix
#-----------------------------------------------------------------------------
PREFIX=\$HOME/opt

#-----------------------------------------------------------------------------
#                                   MPI
#-----------------------------------------------------------------------------

# Build with MPI for parallel simulations.
#MPI=ON 

#-----------------------------------------------------------------------------
#                                  OPENMP                 
#-----------------------------------------------------------------------------

# Enable OpenMP threading.
#OPENMP=ON

#-----------------------------------------------------------------------------
#                           Address Sanitizer (Asan)
#-----------------------------------------------------------------------------

# Enable Asan.
#ASAN=ON

#-----------------------------------------------------------------------------
#                             Floating Point Precision
#-----------------------------------------------------------------------------
# Choose one of the following.

# Double precision.
PRECISION=double

# Single precision.
#PRECISION=single

#-----------------------------------------------------------------------------
#                                Build type
#-----------------------------------------------------------------------------
# Choose one of the following.

# Debug executable (debugging symbols, no optimization).
BUILD_TYPE=Debug

# Release executable (No symbols, optimization).
#BUILD_TYPE=Release

#-----------------------------------------------------------------------------
#                              Shared libraries
#-----------------------------------------------------------------------------

# Uncomment to build polymec libraries as shared libraries.
#SHARED_LIBS=ON

#-----------------------------------------------------------------------------
#                              Build generator
#-----------------------------------------------------------------------------
# Choose one of the following.

# Good old-fashioned UNIX makefiles.
GENERATOR="Unix Makefiles"

# Ninja, a speedy make replacement. Use if available!
#GENERATOR="Ninja"

# Code::Blocks (with UNIX makefiles underneath).
#GENERATOR="CodeBlocks - Unix Makefiles"

# Code::Blocks (with Ninja underneath).
#GENERATOR="CodeBlocks - Ninja"

# Xcode. You can't use this for parallel (MPI) builds.
#GENERATOR="Xcode"

# CodeLite (with UNIX makefiles underneath).
#GENERATOR="CodeLite - Unix Makefiles"

# CodeLite (with Ninja underneath).
#GENERATOR="CodeLite - Ninja"

# Eclipse CDT4 (with UNIX makefiles underneath).
#GENERATOR="Eclipse CDT4 - Unix Makefiles"

# Eclipse CDT4 (with Ninja underneath).
#GENERATOR="Eclipse CDT4 - Ninja"

# Kate (with UNIX makefiles underneath).
#GENERATOR="Kate - Unix Makefiles"

# Kate (with Ninja underneath).
#GENERATOR="Kate - Ninja"

# Sublime Text 2 (with UNIX makefiles underneath).
#GENERATOR="Sublime Text 2 - Unix Makefiles"

# Sublime Text 2 (with Ninja underneath).
#GENERATOR="Sublime Text 2 - Ninja"

#-----------------------------------------------------------------------------
#                               Verbose builds
#-----------------------------------------------------------------------------

# Uncomment this if you want really verbose builds.
#VERBOSE=ON

#-----------------------------------------------------------------------------
#                           Building on Special Machines
#-----------------------------------------------------------------------------

# Uncomment this to indicate that we're building on a special, named machine.
#MACHINE=mymachine

#-----------------------------------------------------------------------------
#                           Code Coverage Analysis
#-----------------------------------------------------------------------------

#COVERAGE=ON

#-----------------------------------------------------------------------------
#                           Continuous Integration
#-----------------------------------------------------------------------------

# Use this if you want to pretend that you're building on Travis CI.
#TRAVIS=ON

#-----------------------------------------------------------------------------
#                                   Compilers
#-----------------------------------------------------------------------------

if [ "\$MPI" = "ON" ]; then
  CC=mpicc
  CXX=mpic++
else
  CC=cc
  CXX=c++
fi

# Override compilers here (ONLY if you know what you're doing!).

# C compiler.
#CC=cc

# C++ compiler.
#CXX=c++

#-----------------------------------------------------------------------------
#                   Don't change anything below here.
#-----------------------------------------------------------------------------

OPTIONS=""
if [ "\$MPI" = "ON" ]; then
  OPTIONS="-DHAVE_MPI=ON"
fi
if [ "\$OPENMP" = "ON" ]; then
  OPTIONS="\$OPTIONS -DUSE_OPENMP=ON"
fi
if [ "\$ASAN" = "ON" ]; then
  OPTIONS="\$OPTIONS -DUSE_ASAN=ON"
fi
if [ "\$SHARED_LIBS" = "ON" ]; then
  OPTIONS="\$OPTIONS -DBUILD_SHARED_LIBS=ON"
fi
if [ "\$VERBOSE" = "ON" ]; then
  OPTIONS="\$OPTIONS -DCMAKE_VERBOSE_MAKEFILE=ON"
fi
if [ "\$TRAVIS" = "ON" ]; then
  OPTIONS="\$OPTIONS -DTRAVIS=ON"
fi
if [ "\$COVERAGE" = "ON" ]; then
  OPTIONS="\$OPTIONS -DCOVERAGE=ON"
fi
if [ ! "\$MACHINE" = "" ]; then
  OPTIONS="\$OPTIONS -DPOLYMEC_MACHINE=\$MACHINE"
fi

cmake \
 -DCMAKE_INSTALL_PREFIX:PATH=\$PREFIX \
 -DCMAKE_BUILD_TYPE=\$BUILD_TYPE \
 -DCMAKE_C_COMPILER=\$CC \
 -DCMAKE_CXX_COMPILER=\$CXX \
 -DPOLYMEC_PRECISION=\$PRECISION \
 \$OPTIONS \
 -G "\$GENERATOR" \
 \$SOURCE_DIR
EOT

# Give instructions.
echo "Your build directory $1 is ready."
echo "To configure your build:"
echo "  1. cd $1"
echo "  2. Edit config.sh"
echo "  3. sh config.sh"
echo "  4. Build using 'make' or your selected IDE."

