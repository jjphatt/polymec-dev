// Copyright (c) 2012-2019, Jeffrey N. Johnson
// All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#ifndef POLYMEC_H
#define POLYMEC_H

/// \mainpage The Polymec High Performance Computing Libraries
///
/// Polymec is a set of libraries that can be used to construct models for
/// physical systems. These libraries are designed to allow a computational
/// scientist to construct low-maintenance science applications with robust
/// capabilities.
///
/// The libraries are:
/// * \ref core - A set of basic data structures useful for scientific
///   calculations: containers (arrays, hashes, trees), points, vectors,
///   spatial and spatio-temporal functions, adjacency graphs, timers, logging
///   facilities, and access to a simple but effective Lua interpreter.
/// * \ref geometry - Data structures for expressing spatial and geometric
///   relationships: meshes, point clouds, signed distance functions, and
///   facilities for partitioning and load balancing.
/// * \ref solvers - Tools for constructing linear and nonlinear solvers for
///   the approximation of mathematical and physical systems.
/// * \ref model - A simple framework for creating simulation models that
///   evolve systems in time.
/// * \ref io - A parallel I/O library that includes an interface to the
///   HDF5-based SILO format. Useful for any real high-performance science app.

// We only use standard C11 around here.
#if (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112L) && !defined(__cplusplus)
#error "Polymec requires a C11-compliant compiler."
#endif

// We require the availability of variable-length arrays, which where
// mandatory in C99 but are optional in C11.
#if defined(__STDC_NO_VLA__) && __STDC_NO_VLA__ == 1
#error "Polymec requires the availability of variable-length arrays (VLA), which this compiler does not support."
#endif

// In a perfect world, we'd have full support for IEEE 754 floating point
// arithmetic. The world in which we live is not presently perfect.
//#if !defined(__STDC_IEC_559__) || __STDC_IEC_559__ == 0
//#error "Polymec requires IEC 60559 (IEEE 754) floating point arithmetic support."
//#endif

// The Annex K bounds-checking interfaces would be really nice to have, and
// someday we shall have them, but not today.
//#if !defined(__STDC_LIB_EXT1__) || __STDC_LIB_EXT1__ == 0
//#error "Polymec requires the availability of the bounds-checking interfaces in Annex K, which this compiler does not support."
//#endif

#if defined(__cplusplus)
#define noreturn
#else
#include <stdnoreturn.h>
#endif

/// \addtogroup core core
///@{

// Real number representation.
#define POLYMEC_HAVE_SINGLE_PRECISION @HAVE_SINGLE_PRECISION@
#define POLYMEC_HAVE_DOUBLE_PRECISION @HAVE_DOUBLE_PRECISION@
#define POLYMEC_PRECISION @POLYMEC_PRECISION@
#define MPI_REAL_T @POLYMEC_MPI_REAL_TYPE@
#define MPI_REAL_INT @POLYMEC_MPI_REAL_TYPE@_INT
#define MPI_COMPLEX_T @POLYMEC_MPI_COMPLEX_TYPE@

// Shared library support.
#define POLYMEC_HAVE_SHARED_LIBS @HAVE_SHARED_LIBS@
#define SHARED_LIBRARY_SUFFIX "@CMAKE_SHARED_LIBRARY_SUFFIX@"

// Valgrind support.
#define POLYMEC_HAVE_VALGRIND @VALGRIND_FOUND@

#include <strings.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <ctype.h>
#include <inttypes.h> // for printing uint64_t, etc.
#include <limits.h>
#include <string.h>

// MPI size_t type.
#if SIZE_MAX == USHRT_MAX
#define MPI_SIZE_T MPI_UNSIGNED_SHORT
#elif SIZE_MAX == UINT_MAX
#define MPI_SIZE_T MPI_UNSIGNED
#elif SIZE_MAX == ULONG_MAX
#define MPI_SIZE_T MPI_UNSIGNED_LONG
#elif SIZE_MAX == ULLONG_MAX
#define MPI_SIZE_T MPI_UNSIGNED_LONG_LONG
#else
#error "Could not determine MPI_SIZE_T."
#endif

// We have to redirect the declaration of the legacy function gamma
// to prevent it from interfering with our own.
#define gamma old_gamma
#include <math.h>
#undef gamma

// We support complex numbers for non-C++ applications.
#ifndef __cplusplus
#include <complex.h>

// Let's keep I available.
#ifdef I
#undef I
#endif

/// \def complex_new(x, y)
/// Defines a complex number (x, y).

#if POLYMEC_HAVE_DOUBLE_PRECISION

typedef double complex complex_t;
#ifdef CMPLX
#define complex_new(x, y) CMPLX(x, y)
#elif defined(_Imaginary_I)
#define complex_new(x, y) ((x) + _Imaginary_I*(y))
#else
#define complex_new(x, y) ((x) + _Complex_I*(y))
#endif

#else

typedef float complex complex_t;
#ifdef CMPLXF
#define complex_new(x, y) CMPLXF(x, y)
#elif defined(_Imaginary_I)
#define complex_new(x, y) ((x) + _Imaginary_I*(y))
#else
#define complex_new(x, y) ((x) + _Complex_I*(y))
#endif

#endif

#endif

// Type-generic macros for dealing with various mathematical functions.
// Also not available to C++.
#ifndef __cplusplus
#define floor(x) _Generic((x), \
                          long double: floorl, \
                          float: floorf, \
                          double: floor)(x)
#define ceil(x) _Generic((x), \
                         long double: ceill, \
                         float: ceilf, \
                         double: ceil)(x)
#define round(x) _Generic((x), \
                          long double: roundl, \
                          float: roundf, \
                          double: round)(x)
#define trunc(x) _Generic((x), \
                          long double: truncl, \
                          float: truncf, \
                          double: trunc)(x)
#define cos(x) _Generic((x), \
                        long double: cosl, \
                        long double complex: ccosl, \
                        float: cosf, \
                        float complex: ccosf, \
                        double complex: ccos, \
                        default: cos)(x)
#define sin(x) _Generic((x), \
                        long double: sinl, \
                        long double complex: csinl, \
                        float: sinf, \
                        float complex: csinf, \
                        double complex: csin, \
                        default: sin)(x)
#define sqrt(x) _Generic((x), \
                         long double: sqrtl, \
                         long double complex: csqrtl, \
                         float: sqrtf, \
                         float complex: csqrtf, \
                         double complex: csqrt, \
                         default: sqrt)(x)
#define abs(x) _Generic((x), \
                        long double: fabsl, \
                        long double complex: cabsl, \
                        float: fabsf, \
                        float complex: cabsf, \
                        double: fabs, \
                        double complex: cabs, \
                        default: abs)(x)
#define pow(x, y) _Generic((x), \
                           long double: powl, \
                           long double complex: cpowl, \
                           float: powf, \
                           float complex: cpowf, \
                           double: pow, \
                           double complex: cpow, \
                           default: pow)(x, y)
#define exp(x) _Generic((x), \
                        long double: expl, \
                        long double complex: cexpl, \
                        float: expf, \
                        float complex: cexpf, \
                        double: exp, \
                        double complex: cexp, \
                        default: exp)(x)
#define carg(z) _Generic((z), \
                         long double complex: cargl, \
                         float complex: cargf, \
                         double complex: carg, \
                         default: carg)(z)
#define conj(z) _Generic((z), \
                         long double complex: conjl, \
                         float complex: conjf, \
                         double complex: conj, \
                         default: conj)(z)
#define creal(z) _Generic((z), \
                          long double complex: creall, \
                          float complex: crealf, \
                          double complex: creal, \
                          default: creal)(z)
#define cimag(z) _Generic((z), \
                          long double complex: cimagl, \
                          float complex: cimagf, \
                          double complex: cimag, \
                          default: cimag)(z)
#define tgamma(x) _Generic((x), \
                          long double: tgammal, \
                          float: tgammaf, \
                          double: tgamma, \
                          default: tgamma)(x)
#define lgamma(x) _Generic((x), \
                           long double: lgammal, \
                           float: lgammaf, \
                           double: lgamma, \
                           default: lgamma)(x)
#define erf(x) _Generic((x), \
                        long double: erfl, \
                        float: erff, \
                        double: erf, \
                        default: erf)(x)
#define erfc(x) _Generic((x), \
                         long double: erfcl, \
                         float: erfcf, \
                         double: erfc, \
                         default: erfc)(x)
#endif

#include <limits.h>
#include <stddef.h>
#include <float.h>
#include <time.h>

#include <mpi.h>

// In defining real_t, we have to accommodate Metis, which defines
// its own.
#ifdef _METIS_H_
#if POLYMEC_HAVE_SINGLE_PRECISION && REALTYPEWIDTH != 32
#error "real_t defined in metis.h disagrees with our definition (float)."
#elif POLYMEC_HAVE_DOUBLE_PRECISION && REALTYPEWIDTH != 64
#error "real_t defined in metis.h disagrees with our definition (double)."
#endif
#else
typedef @POLYMEC_REAL_TYPE@ real_t;
#endif

// Bad Fortran! No biscuit!
#ifdef MPI_REAL
#undef MPI_REAL
#endif

/// \def MIN
/// Returns the minimum of a and b.
#ifndef MIN
#define MIN(a, b) (((a) < (b)) ? (a) : (b))
#endif

/// \def MAX
/// Returns the maximum of a and b.
#ifndef MAX
#define MAX(a, b) (((a) > (b)) ? (a) : (b))
#endif

/// \def SIGN
/// Returns the sign (+1/-1) of the given quantity x.
#define SIGN(x) (((x) > 0) ? 1 : ((x) < 0) ? -1 : 0)

// Machine epsilon.
#ifndef REAL_EPSILON

#if POLYMEC_HAVE_DOUBLE_PRECISION
#define REAL_EPSILON DBL_EPSILON
#define REAL_MAX DBL_MAX
#define REAL_MIN DBL_MIN
#else
#define REAL_EPSILON FLT_EPSILON
#define REAL_MAX FLT_MAX
#define REAL_MIN FLT_MIN
#endif

#endif

/// \def REAL_CONSTANT
/// Denotes a real-valued constant expression. Use REAL_CONSTANT(C) to
/// construct the floating point constant C manifestly in real_t form, rather
/// than relying on explicit casting.
#if POLYMEC_HAVE_DOUBLE_PRECISION
#define REAL_CONSTANT(C) C
#else
#define REAL_CONSTANT(C) C##f
#endif

/// \def ABS
/// Returns the absolute value of a.
#ifndef ABS
#define ABS(a) (((a) >= REAL_CONSTANT(0.0)) ? (a) : -(a))
#endif

// Use polymec_unreachable() to tell the C compiler that a line in a function
// can never be reached.
#if defined(__clang__) || defined(__GNUC__)
// Both Clang and GNU have __builtin_unreachable.
#define polymec_unreachable __builtin_unreachable
#else
#define polymec_unreachable()
#endif

// Global indices are unsigned 64-bit integers.
typedef uint64_t index_t;
#ifndef MPI_INDEX_T
#define MPI_INDEX_T MPI_UINT64_T
#endif

// Configuration information
#define POLYMEC_HAVE_MPI @HAVE_MPI@
#define POLYMEC_HAVE_OPENMP @HAVE_OPENMP@
#define POLYMEC_C_COMPILER "@CMAKE_C_COMPILER@"
#define POLYMEC_INCLUDE_DIR "@PROJECT_BINARY_DIR@/include"
#define POLYMEC_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@"

// The C standard no longer defines M_PI(!!!!).
// So we have to provide it ourselves.
#ifndef M_PI
#include <float.h>
#define M_PI (real_t)(3.1415926535897932384626433832795L)
#if LDBL_DIG > 32
#error "Definition of PI doesn't use the full precision of long double"
#endif
#endif

/// \def ASSERT
/// Emits a fatal error if a predicate is not satisfied.
#ifndef NDEBUG
#define ASSERT(x) \
  { \
    if (!(x)) \
      polymec_abort("Assertion %s failed\nat %s: %d\n", #x, __FILE__, __LINE__); \
  }
#else
#define ASSERT(x)
#endif

/// \def DTOR
/// This converts a destructor function for a specific type to a generic
/// void (*dtor)(void*) destructor.
#define DTOR(x) ((void (*)(void*))(x))

/// \def FILL_ARRAY
/// Here's a macro that fills an array with the given values.
#define FILL_ARRAY(array, start, num, val) \
for (int i = start; i < start + num; ++i) \
  array[i] = val

/// \def BOUNDS
/// The BOUNDS macro returns the bounds of a given dimension in a multidimensional array.
#define BOUNDS(a) ((sizeof(a)) / (sizeof ((a)[0])))

#include "core/allocators.h"
#include "core/logging.h"
#include "core/arch.h"
#include "core/string_utils.h"
#include "core/file_utils.h"

/// A function type for handling errors issued by the polymec libraries.
typedef void (*polymec_error_handler_function)(const char*);

/// Issues a run-time error with the given message. By default, an error sends a
/// message to stdout and exits the program with status -1. If you are
/// using lua_driver to provide an interpreter environment, the error will
/// be issued to the interpreter. To override the default error handler(s), use
/// polymec_set_error_handler().
void polymec_error(const char* message, ...);

/// Issues a fatal run-time error with the given message, printing a message
/// to stdout and exiting the program with status -1.
noreturn void polymec_fatal_error(const char* message, ...);

/// Aborts execution in a proper manner that respects MPI if needed,
/// writing the given message to stderr.
noreturn void polymec_abort(const char* message, ...);

/// Sets the error handler for polymec_error.
void polymec_set_error_handler(polymec_error_handler_function handler);

/// Issues a formatted warning to stderr.
void polymec_warn(const char* message, ...);

/// This function enables floating point exceptions where available.
void polymec_enable_fpe(void);

/// This function disables floating point exceptions.
void polymec_disable_fpe(void);

/// This function suspends all currently-enabled floating point exceptions.
/// They can be restored later with polymec_restore_fpe.
void polymec_suspend_fpe(void);

/// This function restores the exceptions that were suspended by a prior call
/// to polymec_suspend_fpe.
void polymec_restore_fpe(void);

/// Call this function to indicate that something is not implemented
/// with a fatal exit.
void polymec_not_implemented(const char* component);

/// This registers a function to be called by polymec_init, after all of
/// polymec's services have been started. This function gets passed argc and
/// argv, and can make use of polymec's environment. If the function is already
/// registered, it is not registered again. polymec_atinit must be called
/// before polymec_init.
void polymec_atinit(void (*func)(int argc, char** argv));

/// Initializes polymec's services using the usual argc and argv parameters
/// for C programs, along with an optional absolute path to a directory that
/// will be used to store resources for the running process. Specifically:
/// * If MPI has not been initialized, polymec assumes responsibility
///   for initializing and finalizing it.
/// * Logging is started at the default (or requested) level.
/// * Paths for dynamically-loaded libraries are set up if requested.
/// * Threads are set up as requested.
/// * A compute engine server is set up to listen on a port if requested.
/// * Timers are started if requested on the command line.
/// * A signal handler is set up for SIGINT that cleanly shuts down polymec.
/// * Any functions registered using polymec_atinit are called.
/// If polymec has already been initialized, this does nothing.
void polymec_init(int argc, char** argv);

/// Registers a function to be called upon exit. If the function is already
/// registered, it is not registered again. polymec_atexit must be called
/// after polymec_init.
void polymec_atexit(void (*func)(void));

/// Adds the given absolute path to the list of directories that polymec
/// searches for dynamically loadable libraries. If the directory doesn't
/// exist, this function has no effect.
void polymec_add_dl_path(const char* path);

/// Traverses all of the absolute paths that polymec searches for dynamically
/// loadable libraries.
/// \param [in,out] pos Controls the iteration. Set to 0 to reset the iteration.
/// \param [out] path Stores the absolute path to the next loadable library.
bool polymec_next_dl_path(int* pos, const char** path);

/// Attempts to dynamically load the library with the given name, searching
/// polymec's list of paths for dynamically loadable libraries.
/// \param lib_name The name of the library to load, excluding any path,
///                 "lib" prefix, and dynamic library suffix (.so, .dylib, .dll).
/// \returns A context pointer for the loaded library, or NULL if the library could not be loaded.
void* polymec_dlopen(const char* lib_name);

/// Retrieves the symbol with the given name from the given dynamically loaded
/// library (which was obtained using polymec_dlopen).
/// \param library The context pointer for the dynamically loaded library.
/// \param symbol_name The name of the symbol to retrieve.
/// \returns A pointer to the function/symbol with the given name, or NULL if no such symbol was found.
void* polymec_dlsym(void* library, const char* symbol_name);

/// Closes the previously open dynamically loaded library (which was obtained
/// using polymec_dlopen).
/// \param library The context pointer for the dynamically loaded library.
void polymec_dlclose(void* library);

/// This function writes version information to the given file descriptor.
/// \param stream The given file descriptor.
void polymec_version_fprintf(const char* exe_name, FILE* stream);

/// This function writes provenance information to the given file descriptor.
/// \param stream The given file descriptor.
void polymec_provenance_fprintf(FILE* stream);

/// Returns an internal string containing the actual name of the executable
/// polymec application. This string contains just the name of the executable,
/// without any path information.
const char* polymec_executable_name(void);

/// Returns an internal string containing the command that invoked the
/// present instance of a polymec application.
const char* polymec_invocation(void);

/// Returns the time at which the present instance of a polymec application
/// was invoked.
time_t polymec_invocation_time(void);

/// Call this function with a string to append additional information for
/// provenance.
/// \param [in] provenance_data A string that will be appended to provenance data.
void polymec_append_provenance_data(const char* provenance_data);

/// This function returns the number of cores on the system, or 1 if it cannot
/// be determined.
int polymec_num_cores(void);

/// This function returns true if polymec is running in a valgrind process,
/// false if not.
bool polymec_running_in_valgrind(void);

#if POLYMEC_HAVE_DOUBLE_PRECISION
static real_t _polymec_epsilon = 100.0*REAL_EPSILON;
#else
static real_t _polymec_epsilon = 10.0*REAL_EPSILON;
#endif

/// This function returns `true` if two real numbers are indistinguishable,
/// `false` if not. The distinguishability of two real numbers is set by
/// polymec's floating point tolerance (set by default to `REAL_EPSILON`,
/// and set to specific values by \ref set_real_epsilon).
/// \param [in] a The first real number.
/// \param [in] b The second real number.
/// \returns `true` if |a - b| < epsilon, `false` otherwise.
static inline bool reals_equal(real_t a, real_t b)
{
  return (ABS(a - b) < _polymec_epsilon);
}

/// Sets polymec's floating point tolerance for \ref reals_equal.
/// \param [in] epsilon The tolerance.
static inline void set_real_epsilon(real_t epsilon)
{
  _polymec_epsilon = epsilon;
}

/// Returns the floating point tolerance used for \ref reals_equal.
static inline real_t real_epsilon(void)
{
  return _polymec_epsilon;
}

/// This function returns true if \f$ |a - b| < \epsilon \f$, false otherwise.
/// \param [in] a The first real number.
/// \param [in] b The second real number.
/// \param [in] epsilon The tolerance \f$ \epsilon \f$.
/// \returns true if \f$ |a - b| < \epsilon \f$, false otherwise.
static inline bool reals_nearly_equal(real_t a, real_t b, real_t epsilon)
{
  return (ABS(a - b) < epsilon);
}

/// Computes the fraction difference between the real numbers
/// a and b, defined as \f$ |a - b| / |MIN(a, b): MIN(a, b) != 0| \f$.
/// \param [in] a The first real number.
/// \param [in] b The second real number.
/// \returns The fractional difference between a and b.
static inline real_t real_frac_diff(real_t a, real_t b)
{
  real_t ref = ABS(MAX(a, b));
  if (ref > REAL_CONSTANT(0.0))
  {
    ref = (reals_equal(a, 0.0)) ? ABS(b) : (reals_equal(b, 0.0)) ? ABS(a) : ABS(MIN(a, b));
    return ABS(a - b) / ref;
  }
  else
    return REAL_CONSTANT(0.0);
}

/// \def POLYMEC_NOT_IMPLEMENTED
/// Use this macro to indicate that the current function hasn't been implemented.
#define POLYMEC_NOT_IMPLEMENTED polymec_fatal_error("%s:\n  line %d: Function %s is not implemented!", __FILE__, __LINE__, __func__);

/// \def POLYMEC_DEPRECATED
/// Use this macro to indicate that the current function is deprecated.
#define POLYMEC_DEPRECATED log_urgent("%s:\n line %d: Function %s is deprecated.", __FILE__, __LINE__, __func__);

///@}

#endif
