# Build a configuration header file from our options.
configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/polymec.h.in"
  "${CMAKE_CURRENT_BINARY_DIR}/polymec.h"
)

# Make sure our Fortran compiler uses its preprocessor.
set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -cpp")
configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/special_functions.f90.in"
  "${CMAKE_CURRENT_BINARY_DIR}/special_functions.f90"
)

# Generate the thirdparty Lua module from the metadata in 3rdparty/thirdparty.lua.
add_custom_target(generate_thirdparty_module
                  COMMAND ${PROJECT_BINARY_DIR}/bin/lua ${PROJECT_SOURCE_DIR}/tools/generate_thirdparty_module.lua ${PROJECT_SOURCE_DIR}/3rdparty/thirdparty.lua ${CMAKE_CURRENT_BINARY_DIR}/lua_thirdparty.c.new
                  COMMAND cmake -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/lua_thirdparty.c.new ${CMAKE_CURRENT_BINARY_DIR}/lua_thirdparty.c
                  DEPENDS all_3rdparty_libs)

include(add_polymec_library)
add_polymec_library(polymec_core polymec.c arch.c allocators.c logging.c timer.c memory_info.c
                    point.c point2.c tensor2.c hilbert.c kd_tree.c octree.c 
                    rng.c parallel_sort.c permutations.c adj_graph.c 
                    sp_func.c st_func.c polynomial.c enumerable.c
                    least_squares.c options.c partitioning.c 
                    text_buffer.c serializer.c string_utils.c 
                    file_utils.c array_utils.c lookup1.c linear_algebra.c 
                    ${CMAKE_CURRENT_BINARY_DIR}/special_functions.f90 
                    special_functions.c 
                    exchanger.c lua_types.c lua_core.c lua_replace_tostring.c
                    lua_array.c lua_ndarray.c lua_driver.c 
                    ${CMAKE_CURRENT_BINARY_DIR}/lua_thirdparty.c)
set_target_properties(polymec_core PROPERTIES LINKER_LANGUAGE C)
add_dependencies(polymec_core generate_thirdparty_module)

# polymec.c depends on the creation of polymec_version.h and on the creation
# of the high-level headers.
add_dependencies(polymec_core update_version_h generate_headers)

set(POLYMEC_LIBRARIES polymec_core;${POLYMEC_LIBRARIES} PARENT_SCOPE)
set(POLYMEC_LIBRARIES polymec_core;${POLYMEC_LIBRARIES})
add_subdirectory(tests)

# Install library.
if (NOT CMAKE_INSTALL_PREFIX STREQUAL "INSTALL_DISABLED")
  install(TARGETS polymec_core DESTINATION lib)

  # Install headers, including generated files.
  file(GLOB HEADERS *.h)
  LIST(APPEND HEADERS ${CMAKE_CURRENT_BINARY_DIR}/polymec.h)
  LIST(APPEND HEADERS ${CMAKE_CURRENT_BINARY_DIR}/polymec_version.h)
  install(FILES ${HEADERS} DESTINATION include/polymec/core)
endif()
