! Copyright (c) 2012-2019, Jeffrey N. Johnson
! All rights reserved.
! 
! This Source Code Form is subject to the terms of the Mozilla Public
! License, v. 2.0. If a copy of the MPL was not distributed with this
! file, You can obtain one at http://mozilla.org/MPL/2.0/.

#define c_real c_@POLYMEC_REAL_TYPE@
#define c_complex c_@POLYMEC_REAL_TYPE@_complex

module special_functions

use iso_c_binding
implicit none

contains

  complex(c_complex) function cgamma(z) bind(c, name="cgamma")

    complex(c_complex), value, intent(in) :: z
    real(8) :: x, y, re_g, im_g

    interface
      subroutine cgama(x, y, kf, gr, gi)
        real(8), intent(in) :: x, y
        integer(4), intent(in) :: kf
        real(8), intent(inout) :: gr, gi
      end subroutine
    end interface

    x = real(z)
    y = aimag(z)
    call cgama(x, y, 1, re_g, im_g)
    cgamma = complex(re_g, im_g)
  end function

  complex(c_complex) function clgamma(z) bind(c, name="clgamma")

    complex(c_complex), value, intent(in) :: z
    real(8) :: x, y, re_g, im_g

    interface
      subroutine cgama(x, y, kf, gr, gi)
        real(8), intent(in) :: x, y
        integer(4), intent(in) :: kf
        real(8), intent(inout) :: gr, gi
      end subroutine
    end interface

    x = real(z)
    y = aimag(z)
    call cgama(x, y, 0, re_g, im_g)
    clgamma = complex(re_g, im_g)
  end function

  real(c_real) function bessel_j0(x) bind(c, name="bessel_j0")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_j0 = bj0
  end function

  real(c_real) function bessel_dj0dx(x) bind(c, name="bessel_dj0dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_dj0dx = dj0
  end function

  real(c_real) function bessel_j1(x) bind(c, name="bessel_j1")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_j1 = bj1
  end function

  real(c_real) function bessel_dj1dx(x) bind(c, name="bessel_dj1dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_dj1dx = dj1
  end function

  real(c_real) function bessel_jn(n, x) bind(c, name="bessel_jn")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, bjn, djn, fjn, byn, dyn, fyn

    interface
      subroutine jyndd(n, x, bjn, djn, fjn, byn, dyn, fyn)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: bjn, djn, fjn, byn, dyn, fyn
      end subroutine
    end interface

    xx = x
    call jyndd(n, xx, bjn, djn, fjn, byn, dyn, fyn)
    bessel_jn = bjn
  end function

  real(c_real) function bessel_djndx(n, x) bind(c, name="bessel_djndx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, bjn, djn, fjn, byn, dyn, fyn

    interface
      subroutine jyndd(n, x, bjn, djn, fjn, byn, dyn, fyn)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: bjn, djn, fjn, byn, dyn, fyn
      end subroutine
    end interface

    xx = x
    call jyndd(n, xx, bjn, djn, fjn, byn, dyn, fyn)
    bessel_djndx = djn
  end function

  subroutine bessel_find_jn_roots(n, num_roots, roots) bind(c, name="bessel_find_jn_roots")
    integer(c_int), value, intent(in) :: n, num_roots
    type(c_ptr), value :: roots

    integer(4)       :: f_n, f_nr, i
    real(8), dimension(:), pointer :: f_roots
    real(8) :: jnr(num_roots), jnpr(num_roots), ynr(num_roots), ynpr(num_roots)

    f_n = n
    f_nr = num_roots
    call c_f_pointer(roots, f_roots, (/num_roots/))
    call jyzo(f_n, f_nr, jnr, jnpr, ynr, ynpr)
    do i = 1, num_roots
      f_roots(i) = jnr(i)
    end do
  end subroutine

  real(c_real) function bessel_jv(v, x) bind(c, name="bessel_jv")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bj(0:int(v)), dj(0:int(v)), by(0:int(v)), dy(0:int(v))

    interface
      subroutine jyv(v, x, vm, bj, dj, by, dy)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bj(0:*), dj(0:*), by(0:*), dy(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call jyv(vv, xx, vm, bj, dj, by, dy)
    bessel_jv = bj(int(v))
  end function

  real(c_real) function bessel_djvdx(v, x) bind(c, name="bessel_djvdx")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bj(0:int(v)), dj(0:int(v)), by(0:int(v)), dy(0:int(v))

    interface
      subroutine jyv(v, x, vm, bj, dj, by, dy)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bj(0:*), dj(0:*), by(0:*), dy(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call jyv(vv, xx, vm, bj, dj, by, dy)
    bessel_djvdx = dj(int(v))
  end function

  complex(c_complex) function bessel_cjv(v, z) bind(c, name="bessel_cjv")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbj(0:int(v)), cdj(0:int(v)), cby(0:int(v)), cdy(0:int(v))

    interface
      subroutine cjyva(v, z, vm, cbj, cdj, cby, cdy)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbj(0:*), cdj(0:*), cby(0:*), cdy(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cjyva(vv, zz, vm, cbj, cdj, cby, cdy)
    bessel_cjv = cbj(int(v))
  end function

  complex(c_complex) function bessel_djvdz(v, z) bind(c, name="bessel_djvdz")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbj(0:int(v)), cdj(0:int(v)), cby(0:int(v)), cdy(0:int(v))

    interface
      subroutine cjyva(v, z, vm, cbj, cdj, cby, cdy)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbj(0:*), cdj(0:*), cby(0:*), cdy(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cjyva(vv, zz, vm, cbj, cdj, cby, cdy)
    bessel_djvdz = cdj(int(v))
  end function

  real(c_real) function bessel_y0(x) bind(c, name="bessel_y0")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_y0 = by0
  end function

  real(c_real) function bessel_dy0dx(x) bind(c, name="bessel_dy0dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_dy0dx = dy0
  end function

  real(c_real) function bessel_y1(x) bind(c, name="bessel_y1")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_y1 = by1
  end function

  real(c_real) function bessel_dy1dx(x) bind(c, name="bessel_dy1dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1

    interface
      subroutine jy01a(x, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bj0, dj0, bj1, dj1, by0, dy0, by1, dy1
      end subroutine
    end interface

    xx = x
    call jy01a(xx, bj0, dj0, bj1, dj1, by0, dy0, by1, dy1)
    bessel_dy1dx = dy1
  end function

  real(c_real) function bessel_yn(n, x) bind(c, name="bessel_yn")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, bjn, djn, fjn, byn, dyn, fyn

    interface
      subroutine jyndd(n, x, bjn, djn, fjn, byn, dyn, fyn)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: bjn, djn, fjn, byn, dyn, fyn
      end subroutine
    end interface

    xx = x
    call jyndd(n, xx, bjn, djn, fjn, byn, dyn, fyn)
    bessel_yn = byn
  end function

  real(c_real) function bessel_dyndx(n, x) bind(c, name="bessel_dyndx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, bjn, djn, fjn, byn, dyn, fyn

    interface
      subroutine jyndd(n, x, bjn, djn, fjn, byn, dyn, fyn)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: bjn, djn, fjn, byn, dyn, fyn
      end subroutine
    end interface

    xx = x
    call jyndd(n, xx, bjn, djn, fjn, byn, dyn, fyn)
    bessel_dyndx = dyn
  end function

  subroutine bessel_find_yn_roots(n, num_roots, roots) bind(c, name="bessel_find_yn_roots")
    integer(c_int), value, intent(in) :: n, num_roots
    type(c_ptr), value :: roots

    integer(4)       :: f_n, f_nr, i
    real(8), dimension(:), pointer :: f_roots
    real(8) :: jnr(num_roots), jnpr(num_roots), ynr(num_roots), ynpr(num_roots)

    f_n = n
    f_nr = num_roots
    call c_f_pointer(roots, f_roots, (/num_roots/))
    call jyzo(f_n, f_nr, jnr, jnpr, ynr, ynpr)
    do i = 1, num_roots
      f_roots(i) = ynr(i)
    end do
  end subroutine

  real(c_real) function bessel_yv(v, x) bind(c, name="bessel_yv")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bj(0:int(v)), dj(0:int(v)), by(0:int(v)), dy(0:int(v))

    interface
      subroutine jyv(v, x, vm, bj, dj, by, dy)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bj(0:*), dj(0:*), by(0:*), dy(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call jyv(vv, xx, vm, bj, dj, by, dy)
    bessel_yv = by(int(v))
  end function

  real(c_real) function bessel_dyvdx(v, x) bind(c, name="bessel_dyvdx")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bj(0:int(v)), dj(0:int(v)), by(0:int(v)), dy(0:int(v))

    interface
      subroutine jyv(v, x, vm, bj, dj, by, dy)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bj(0:*), dj(0:*), by(0:*), dy(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call jyv(vv, xx, vm, bj, dj, by, dy)
    bessel_dyvdx = dy(int(v))
  end function

  complex(c_complex) function bessel_cyv(v, z) bind(c, name="bessel_cyv")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbj(0:int(v)), cdj(0:int(v)), cby(0:int(v)), cdy(0:int(v))

    interface
      subroutine cjyva(v, z, vm, cbj, cdj, cby, cdy)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbj(0:*), cdj(0:*), cby(0:*), cdy(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cjyva(vv, zz, vm, cbj, cdj, cby, cdy)
    bessel_cyv = cby(int(v))
  end function

  complex(c_complex) function bessel_dyvdz(v, z) bind(c, name="bessel_dyvdz")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbj(0:int(v)), cdj(0:int(v)), cby(0:int(v)), cdy(0:int(v))

    interface
      subroutine cjyva(v, z, vm, cbj, cdj, cby, cdy)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbj(0:*), cdj(0:*), cby(0:*), cdy(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cjyva(vv, zz, vm, cbj, cdj, cby, cdy)
    bessel_dyvdz = cdy(int(v))
  end function

  real(c_real) function bessel_i0(x) bind(c, name="bessel_i0")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_i0 = bi0
  end function

  real(c_real) function bessel_di0dx(x) bind(c, name="bessel_di0dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_di0dx = di0
  end function

  real(c_real) function bessel_i1(x) bind(c, name="bessel_i1")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_i1 = bi1
  end function

  real(c_real) function bessel_di1dx(x) bind(c, name="bessel_di1dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_di1dx = di1
  end function

  real(c_real) function bessel_k0(x) bind(c, name="bessel_k0")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_k0 = bk0
  end function

  real(c_real) function bessel_dk0dx(x) bind(c, name="bessel_dk0dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x 
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_dk0dx = dk0
  end function

  real(c_real) function bessel_k1(x) bind(c, name="bessel_k1")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_k1 = bk1
  end function

  real(c_real) function bessel_dk1dx(x) bind(c, name="bessel_dk1dx")

    real(c_real), value, intent(in) :: x
    real(8) :: xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1

    interface
      subroutine ik01a(x, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
        real(8), intent(in) :: x
        real(8), intent(inout) :: bi0, di0, bi1, di1, bk0, dk0, bk1, dk1
      end subroutine
    end interface

    xx = x 
    call ik01a(xx, bi0, di0, bi1, di1, bk0, dk0, bk1, dk1)
    bessel_dk1dx = dk1
  end function

  real(c_real) function bessel_in(n, x) bind(c, name="bessel_in")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    integer(4) :: nm
    real(8) :: xx, bi(0:n), di(0:n), bk(0:n), dk(0:n)

    interface
      subroutine ikna(n, x, nm, bi, di, bk, dk)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        integer(4), intent(inout) :: nm
        real(8), intent(inout) :: bi(0:n), di(0:n), bk(0:n), dk(0:n)
      end subroutine
    end interface

    xx = x
    call ikna(n, xx, nm, bi, di, bk, dk)
    bessel_in = bi(n)
  end function

  real(c_real) function bessel_dindx(n, x) bind(c, name="bessel_dindx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    integer(4) :: nm
    real(8) :: xx, bi(0:n), di(0:n), bk(0:n), dk(0:n)

    interface
      subroutine ikna(n, x, nm, bi, di, bk, dk)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        integer(4), intent(inout) :: nm
        real(8), intent(inout) :: bi(0:n), di(0:n), bk(0:n), dk(0:n)
      end subroutine
    end interface

    xx = x
    call ikna(n, xx, nm, bi, di, bk, dk)
    bessel_dindx = di(n)
  end function

  real(c_real) function bessel_iv(v, x) bind(c, name="bessel_iv")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bi(0:int(v)), di(0:int(v)), bk(0:int(v)), dk(0:int(v))

    interface
      subroutine ikv(v, x, vm, bi, di, bk, dk)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bi(0:*), di(0:*), bk(0:*), dk(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call ikv(vv, xx, vm, bi, di, bk, dk)
    bessel_iv = bi(int(v))
  end function

  real(c_real) function bessel_divdx(v, x) bind(c, name="bessel_divdx")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bi(0:int(v)), di(0:int(v)), bk(0:int(v)), dk(0:int(v))

    interface
      subroutine ikv(v, x, vm, bi, di, bk, dk)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bi(0:*), di(0:*), bk(0:*), dk(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call ikv(vv, xx, vm, bi, di, bk, dk)
    bessel_divdx = di(int(v))
  end function

  complex(c_complex) function bessel_civ(v, z) bind(c, name="bessel_civ")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbi(0:int(v)), cdi(0:int(v)), cbk(0:int(v)), cdk(0:int(v))

    interface
      subroutine cikva(v, z, vm, cbi, cdi, cbk, cdk)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbi(0:*), cdi(0:*), cbk(0:*), cdk(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cikva(vv, zz, vm, cbi, cdi, cbk, cdk)
    bessel_civ = cbi(int(v))
  end function

  complex(c_complex) function bessel_divdz(v, z) bind(c, name="bessel_divdz")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbi(0:int(v)), cdi(0:int(v)), cbk(0:int(v)), cdk(0:int(v))

    interface
      subroutine cikva(v, z, vm, cbi, cdi, cbk, cdk)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbi(0:*), cdi(0:*), cbk(0:*), cdk(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cikva(vv, zz, vm, cbi, cdi, cbk, cdk)
    bessel_divdz = cdk(int(v))
  end function

  real(c_real) function bessel_kn(n, x) bind(c, name="bessel_kn")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    integer(4) :: nm
    real(8) :: xx, bi(0:n), di(0:n), bk(0:n), dk(0:n)

    interface
      subroutine ikna(n, x, nm, bi, di, bk, dk)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        integer(4), intent(inout) :: nm
        real(8), intent(inout) :: bi(0:n), di(0:n), bk(0:n), dk(0:n)
      end subroutine
    end interface

    xx = x
    call ikna(n, xx, nm, bi, di, bk, dk)
    bessel_kn = bk(n)
  end function

  real(c_real) function bessel_dkndx(n, x) bind(c, name="bessel_dkndx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    integer(4) :: nm
    real(8) :: xx, bi(0:n), di(0:n), bk(0:n), dk(0:n)

    interface
      subroutine ikna(n, x, nm, bi, di, bk, dk)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        integer(4), intent(inout) :: nm
        real(8), intent(inout) :: bi(0:n), di(0:n), bk(0:n), dk(0:n)
      end subroutine
    end interface

    xx = x
    call ikna(n, xx, nm, bi, di, bk, dk)
    bessel_dkndx = dk(n)
  end function

  real(c_real) function bessel_kv(v, x) bind(c, name="bessel_kv")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bi(0:int(v)), di(0:int(v)), bk(0:int(v)), dk(0:int(v))

    interface
      subroutine ikv(v, x, vm, bi, di, bk, dk)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bi(0:*), di(0:*), bk(0:*), dk(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call ikv(vv, xx, vm, bi, di, bk, dk)
    bessel_kv = bk(int(v))
  end function

  real(c_real) function bessel_dkvdx(v, x) bind(c, name="bessel_dkvdx")

    real(c_real), value, intent(in) :: v
    real(c_real), value, intent(in) :: x
    real(8) :: vv, vm
    real(8) :: xx, bi(0:int(v)), di(0:int(v)), bk(0:int(v)), dk(0:int(v))

    interface
      subroutine ikv(v, x, vm, bi, di, bk, dk)
        real(8), intent(in) :: v
        real(8), intent(in) :: x
        real(8), intent(inout) :: vm
        real(8), intent(inout) :: bi(0:*), di(0:*), bk(0:*), dk(0:*)
      end subroutine
    end interface

    vv = v
    xx = x
    call ikv(vv, xx, vm, bi, di, bk, dk)
    bessel_dkvdx = dk(int(v))
  end function

  complex(c_complex) function bessel_ckv(v, z) bind(c, name="bessel_ckv")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbi(0:int(v)), cdi(0:int(v)), cbk(0:int(v)), cdk(0:int(v))

    interface
      subroutine cikva(v, z, vm, cbi, cdi, cbk, cdk)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbi(0:*), cdi(0:*), cbk(0:*), cdk(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cikva(vv, zz, vm, cbi, cdi, cbk, cdk)
    bessel_ckv = cbk(int(v))
  end function

  complex(c_complex) function bessel_dkvdz(v, z) bind(c, name="bessel_dkvdz")

    real(c_real), value, intent(in) :: v
    complex(c_complex), value, intent(in) :: z
    real(8) :: vv, vm
    complex(8) :: zz, cbi(0:int(v)), cdi(0:int(v)), cbk(0:int(v)), cdk(0:int(v))

    interface
      subroutine cikva(v, z, vm, cbi, cdi, cbk, cdk)
        real(8), intent(in) :: v
        complex(8), intent(in) :: z
        real(8), intent(inout) :: vm
        complex(8), intent(inout) :: cbi(0:*), cdi(0:*), cbk(0:*), cdk(0:*)
      end subroutine
    end interface

    vv = v
    zz = z
    call cikva(vv, zz, vm, cbi, cdi, cbk, cdk)
    bessel_dkvdz = cdk(int(v))
  end function

  real(c_real) function chebyshev_tn(n, x) bind(c, name="chebyshev_tn")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(1, max(n,1), xx, pl, dpl)
    chebyshev_tn = pl(n)
  end function

  real(c_real) function chebyshev_dtndx(n, x) bind(c, name="chebyshev_dtndx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(1, max(n,1), xx, pl, dpl)
    chebyshev_dtndx = dpl(n)
  end function

  real(c_real) function chebyshev_un(n, x) bind(c, name="chebyshev_un")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(2, max(n,1), xx, pl, dpl)
    chebyshev_un = pl(n)
  end function

  real(c_real) function chebyshev_dundx(n, x) bind(c, name="chebyshev_dundx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(2, max(n,1), xx, pl, dpl)
    chebyshev_dundx = dpl(n)
  end function

  real(c_real) function laguerre_ln(n, x) bind(c, name="laguerre_ln")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(3, max(n,1), xx, pl, dpl)
    laguerre_ln = pl(n)
  end function

  real(c_real) function laguerre_dlndx(n, x) bind(c, name="laguerre_dlndx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(3, max(n,1), xx, pl, dpl)
    laguerre_dlndx = dpl(n)
  end function

  real(c_real) function hermite_hn(n, x) bind(c, name="hermite_hn")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(4, max(n,1), xx, pl, dpl)
    hermite_hn = pl(n)
  end function

  real(c_real) function hermite_dhndx(n, x) bind(c, name="hermite_dhndx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pl(0:max(n,1)), dpl(0:max(n,1))

    interface
      subroutine othpl(kf, n, x, pl, dpl)
        integer(4), intent(in) :: kf
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pl(0:max(n,1)), dpl(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call othpl(4, max(n,1), xx, pl, dpl)
    hermite_dhndx = dpl(n)
  end function

  real(c_real) function legendre_pn(n, x) bind(c, name="legendre_pn")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pn(0:max(n,1)), pd(0:max(n,1))

    interface
      subroutine lpn(n, x, pn, pd)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pn(0:max(n,1)), pd(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call lpn(max(n,1), xx, pn, pd)
    legendre_pn = pn(n)
  end function

  real(c_real) function legendre_dpndx(n, x) bind(c, name="legendre_dpndx")

    integer(c_int), value, intent(in) :: n
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pn(0:max(n,1)), pd(0:max(n,1))

    interface
      subroutine lpn(n, x, pn, pd)
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pn(0:max(n,1)), pd(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call lpn(max(n,1), xx, pn, pd)
    legendre_dpndx = pd(n)
  end function

  real(c_real) function legendre_pml(m, l, x) bind(c, name="legendre_pml")

    integer(c_int), value, intent(in) :: m
    integer(c_int), value, intent(in) :: l
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pm(0:max(l,1)), pd(0:max(l,1))

    interface
      subroutine lpmns(m, n, x, pm, pd)
        integer(4), intent(in) :: m
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pm(0:max(n,1)), pd(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call lpmns(m, max(l,1), xx, pm, pd)
    legendre_pml = pm(l)
  end function

  real(c_real) function legendre_dpmldx(m, l, x) bind(c, name="legendre_dpmldx")

    integer(c_int), value, intent(in) :: m
    integer(c_int), value, intent(in) :: l
    real(c_real), value, intent(in) :: x
    real(8) :: xx, pm(0:max(l,1)), pd(0:max(l,1))

    interface
      subroutine lpmns(m, n, x, pm, pd)
        integer(4), intent(in) :: m
        integer(4), intent(in) :: n
        real(8), intent(in) :: x
        real(8), intent(inout) :: pm(0:max(n,1)), pd(0:max(n,1))
      end subroutine
    end interface

    xx = x
    call lpmns(m, max(l,1), xx, pm, pd)
    legendre_dpmldx = pd(l)
  end function

  complex(c_complex) function bessel_h1n(n, z) bind(c, name="bessel_h1n")

    integer(c_int), value, intent(in)  :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)

    interface
      subroutine ch12n(n, z, nm, chf1, chd1, chf2, chd2)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)
      end subroutine
    end interface

    zz = z
    call ch12n(n, zz, nm, chf1, chd1, chf2, chd2)
    bessel_h1n = chf1(n)
  end function

  complex(c_complex) function bessel_dh1ndz(n, z) bind(c, name="bessel_dh1ndz")

    integer(c_int), value, intent(in)  :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)

    interface
      subroutine ch12n(n, z, nm, chf1, chd1, chf2, chd2)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)
      end subroutine
    end interface

    zz = z
    call ch12n(n, zz, nm, chf1, chd1, chf2, chd2)
    bessel_dh1ndz = chd1(n)
  end function

  complex(c_complex) function bessel_h2n(n, z) bind(c, name="bessel_h2n")

    integer(c_int), value, intent(in)  :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)

    interface
      subroutine ch12n(n, z, nm, chf1, chd1, chf2, chd2)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)
      end subroutine
    end interface

    zz = z
    call ch12n(n, zz, nm, chf1, chd1, chf2, chd2)
    bessel_h2n = chf2(n)
  end function

  complex(c_complex) function bessel_dh2ndz(n, z) bind(c, name="bessel_dh2ndz")

    integer(c_int), value, intent(in)  :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)

    interface
      subroutine ch12n(n, z, nm, chf1, chd1, chf2, chd2)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: chf1(0:n), chd1(0:n), chf2(0:n), chd2(0:n)
      end subroutine
    end interface

    zz = z
    call ch12n(n, zz, nm, chf1, chd1, chf2, chd2)
    bessel_dh2ndz = chd2(n)
  end function

  complex(c_complex) function bessel_cj0(z) bind(c, name="bessel_cj0")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1

    interface
      subroutine cjy01(z, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1
      end subroutine
    end interface

    zz = z
    call cjy01(zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
    bessel_cj0 = cbj0
  end function

  complex(c_complex) function bessel_dj0dz(z) bind(c, name="bessel_dj0dz")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1

    interface
      subroutine cjy01(z, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1
      end subroutine
    end interface

    zz = z
    call cjy01(zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
    bessel_dj0dz = cdj0
  end function

  complex(c_complex) function bessel_cj1(z) bind(c, name="bessel_cj1")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1

    interface
      subroutine cjy01(z, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1
      end subroutine
    end interface

    zz = z
    call cjy01(zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
    bessel_cj1 = cbj1
  end function

  complex(c_complex) function bessel_dj1dz(z) bind(c, name="bessel_dj1dz")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1

    interface
      subroutine cjy01(z, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1
      end subroutine
    end interface

    zz = z
    call cjy01(zz, cbj0, cdj0, cbj1, cdj1, cby0, cdy0, cby1, cdy1)
    bessel_dj1dz = cdj1
  end function

  complex(c_complex) function bessel_cjn(n, z) bind(c, name="bessel_cjn")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)

    interface
      subroutine cjyna(n, z, nm, cbj, cdj, cby, cdy)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)
      end subroutine
    end interface

    zz = z
    call cjyna(n, zz, nm, cbj, cdj, cby, cdy)
    bessel_cjn = cbj(n)
  end function

  complex(c_complex) function bessel_djndz(n, z) bind(c, name="bessel_djndz")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)

    interface
      subroutine cjyna(n, z, nm, cbj, cdj, cby, cdy)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)
      end subroutine
    end interface

    zz = z
    call cjyna(n, zz, nm, cbj, cdj, cby, cdy)
    bessel_djndz = cdj(n)
  end function

  complex(c_complex) function bessel_cyn(n, z) bind(c, name="bessel_cyn")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)

    interface
      subroutine cjyna(n, z, nm, cbj, cdj, cby, cdy)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)
      end subroutine
    end interface

    zz = z
    call cjyna(n, zz, nm, cbj, cdj, cby, cdy)
    bessel_cyn = cby(n)
  end function

  complex(c_complex) function bessel_dyndz(n, z) bind(c, name="bessel_dyndz")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)

    interface
      subroutine cjyna(n, z, nm, cbj, cdj, cby, cdy)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbj(0:n), cdj(0:n), cby(0:n), cdy(0:n)
      end subroutine
    end interface

    zz = z
    call cjyna(n, zz, nm, cbj, cdj, cby, cdy)
    bessel_dyndz = cdy(n)
  end function

  complex(c_complex) function bessel_ci0(z) bind(c, name="bessel_ci0")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_ci0 = cbi0
  end function

  complex(c_complex) function bessel_di0dz(z) bind(c, name="bessel_di0dz")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_di0dz = cdi0
  end function

  complex(c_complex) function bessel_ci1(z) bind(c, name="bessel_ci1")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_ci1 = cbi1
  end function

  complex(c_complex) function bessel_di1dz(z) bind(c, name="bessel_di1dz")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_di1dz = cdi1
  end function

  complex(c_complex) function bessel_cin(n, z) bind(c, name="bessel_cin")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)

    interface
      subroutine cikna(n, z, nm, cbi, cdi, cbk, cdk)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)
      end subroutine
    end interface

    zz = z
    call cikna(n, zz, nm, cbi, cdi, cbk, cdk)
    bessel_cin = cbi(n)
  end function

  complex(c_complex) function bessel_dindz(n, z) bind(c, name="bessel_dindz")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)

    interface
      subroutine cikna(n, z, nm, cbi, cdi, cbk, cdk)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)
      end subroutine
    end interface

    zz = z
    call cikna(n, zz, nm, cbi, cdi, cbk, cdk)
    bessel_dindz = cdi(n)
  end function

  complex(c_complex) function bessel_ck0(z) bind(c, name="bessel_ck0")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_ck0 = cbk0
  end function

  complex(c_complex) function bessel_dk0dz(z) bind(c, name="bessel_dk0dz")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_dk0dz = cdk0
  end function

  complex(c_complex) function bessel_ck1(z) bind(c, name="bessel_ck1")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_ck1 = cbk1
  end function

  complex(c_complex) function bessel_dk1dz(z) bind(c, name="bessel_dk1dz")

    complex(c_complex), value, intent(in) :: z
    complex(8) :: zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1

    interface
      subroutine cik01(z, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
        complex(8), intent(in) :: z
        complex(8), intent(inout) :: cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1
      end subroutine
    end interface

    zz = z
    call cik01(zz, cbi0, cdi0, cbi1, cdi1, cbk0, cdk0, cbk1, cdk1)
    bessel_dk1dz = cdk1
  end function

  complex(c_complex) function bessel_ckn(n, z) bind(c, name="bessel_ckn")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)

    interface
      subroutine cikna(n, z, nm, cbi, cdi, cbk, cdk)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)
      end subroutine
    end interface

    zz = z
    call cikna(n, zz, nm, cbi, cdi, cbk, cdk)
    bessel_ckn = cbk(n)
  end function

  complex(c_complex) function bessel_dkndz(n, z) bind(c, name="bessel_dkndz")

    integer(c_int), value, intent(in) :: n
    complex(c_complex), value, intent(in) :: z
    integer(4) :: nm
    complex(8) :: zz, cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)

    interface
      subroutine cikna(n, z, nm, cbi, cdi, cbk, cdk)
        integer(4), intent(in) :: n
        complex(8), intent(in) :: z
        integer(4), intent(inout) :: nm
        complex(8), intent(inout) :: cbi(0:n), cdi(0:n), cbk(0:n), cdk(0:n)
      end subroutine
    end interface

    zz = z
    call cikna(n, zz, nm, cbi, cdi, cbk, cdk)
    bessel_dkndz = cdk(n)
  end function

end module special_functions
