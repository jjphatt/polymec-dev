-- This tests the model and probe classes.

-- Make a simple probe that acquires the time.
function timer(t)
  return t
end

-- Acquire a bunch of times from 1 to 10.
p = probe.new('time', timer, {})
print(p)
for t=1,10 do
  val = p:acquire(t)
  print(t, val)
end
val = nil

-- Now make a probe that returns a random 3-vector.
function rv(t)
  return {math.random(), math.random(), math.random()}
end
p1 = probe.new('randomizer', rv, {3})
print(p1)

-- Set up a callback to print out what we acquire.
function printit(t, data)
   print('p1: acquired ' .. #data .. ' numbers at time ' .. t)
end
p1:on_acquire(printit)

for t=1,10 do
  v = p1:acquire(t)
  print(t, v)
end
v = nil

-- How about a random 3x3 matrix?
function rm(t)
  return {{math.random(), math.random(), math.random()},
          {math.random(), math.random(), math.random()},
          {math.random(), math.random(), math.random()}}
end
p11 = probe.new('random_matrixizer', rm, {3,3})
print(p11)

for t=1,10 do
  m = p11:acquire(t)
  print(t, m)
end
m = nil

-- Or a random 3x3x3 tensor?
function rt(t)
  return {{{math.random(), math.random(), math.random()},
           {math.random(), math.random(), math.random()},
           {math.random(), math.random(), math.random()}},
          {{math.random(), math.random(), math.random()},
           {math.random(), math.random(), math.random()},
           {math.random(), math.random(), math.random()}},
          {{math.random(), math.random(), math.random()},
           {math.random(), math.random(), math.random()},
           {math.random(), math.random(), math.random()}}}
end
p111 = probe.new('random_tensorizer', rt, {3,3,3})
print(p111)

for t=1,10 do
  tt = p111:acquire(t)
  print(t, tt)
end
tt = nil

-- Or a random 3x3x3x3 ubertensor?
function rut(t)
  return {{{{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}},
           {{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}},
           {{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}}},
          {{{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}},
           {{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}},
           {{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}}},
          {{{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}},
           {{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}},
           {{math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()},
            {math.random(), math.random(), math.random()}}}}
end
p1111 = probe.new('random_ubertensorizer', rut, {3,3,3,3})
p1111:stream_on_acquire{format = 'json', 
                        destination = 'localhost:4040'}
print(p1111)

for t=1,10 do
  ut = p1111:acquire(t)
  print(t, ut)
end
ut = nil

-- Force probe garbage collection.
collectgarbage("collect")
