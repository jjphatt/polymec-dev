sudo: required

services:
  - docker

language: c

env:
  matrix:
    - BUILD_TYPE=Debug MPI=ON SHARED_LIBS=OFF PRECISION=double
    - BUILD_TYPE=Debug MPI=ON SHARED_LIBS=OFF PRECISION=single
    - BUILD_TYPE=Debug MPI=ON SHARED_LIBS=ON COVERAGE=ON PRECISION=double PETSC_DIR=/usr PETSC_ARCH="" HYPRE_DIR=/usr/lib/x86_64-linux-gnu
    - BUILD_TYPE=Debug MPI=OFF SHARED_LIBS=OFF PRECISION=double
    - BUILD_TYPE=Debug MPI=OFF SHARED_LIBS=OFF PRECISION=single
    - BUILD_TYPE=Debug MPI=OFF SHARED_LIBS=ON PRECISION=double
    - BUILD_TYPE=Release MPI=ON SHARED_LIBS=OFF PRECISION=double
    - BUILD_TYPE=Release MPI=ON SHARED_LIBS=OFF PRECISION=single
    - BUILD_TYPE=Release MPI=ON SHARED_LIBS=ON PRECISION=double
    - BUILD_TYPE=Release MPI=OFF SHARED_LIBS=OFF PRECISION=double 
    - BUILD_TYPE=Release MPI=OFF SHARED_LIBS=OFF PRECISION=single
    - BUILD_TYPE=Release MPI=OFF SHARED_LIBS=ON PRECISION=double

before_install:
  - docker run -d --name polymec-build -v $PWD:/travis -e "PETSC_DIR=$PETSC_DIR" -e "PETSC_ARCH=$PETSC_ARCH" -e "HYPRE_DIR=$HYPRE_DIR" ubuntu:bionic tail -f /dev/null
  - docker ps

install:
  - docker exec -t polymec-build bash -c "apt-get update;
    apt-get install -y openmpi-bin libopenmpi-dev ssh g++ gfortran liblapack-dev cmake ninja-build autotools-dev bash git valgrind libpetsc3.7.7 lcov curl;
    ln -s /usr/lib/x86_64-linux-gnu/libpetsc_real.so.3.7.7 /usr/lib/libpetsc.so"

before_script:
  - if [ "$MPI" = "ON" ]; then export CC=mpicc; export CXX=mpic++; export FC=mpif90; else export CC=cc; export CXX=c++; export FC=gfortran; fi
  - docker exec -t polymec-build bash -c "cd travis;
    mkdir build && cd build;
    cmake -G Ninja -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DHAVE_MPI=$MPI -DBUILD_SHARED_LIBS=$SHARED_LIBS -DPOLYMEC_PRECISION=$PRECISION -DTRAVIS_CI=ON -DCOVERAGE=\"$COVERAGE\" -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_Fortran_COMPILER=$FC .."

script: 
  - if [ "$BUILD_TYPE" = "Debug" ] && [ "$SHARED_LIBS" = "OFF" ]; then export TEST=memcheck; else export TEST=test; fi
  - docker exec -t polymec-build bash -c "cd travis/build;
    ninja -j3 install;
    ninja $TEST"

after_success:
  - if [ "$COVERAGE" = "ON" ]; then CI_ENV=`bash <(curl -s https://codecov.io/env)`; docker exec $CI_ENV -t polymec-build bash -c "cd travis/build; make coverage; bash <(curl -s https://codecov.io/bash)"; fi

after_failure: 
  - docker exec -t polymec-build bash -c "cd travis;
    cat build/Testing/Temporary/LastTest.log || cat build/*/Testing/Temporary/LastDynamicAnalysis*;
    cat build/Testing/Temporary/MemoryChecker*.log"

after_script:
  - docker exec -t polymec-build bash -c "cd travis;
    cat build/Testing/Temporary/LastTest.log;
    cat build/3rdparty/*error*.log"

#deploy:
#  provider: s3
#  access_key_id: $S3_ACCESS_KEY_ID
#  secret_access_key: $S3_SECRET_KEY
#  bucket: polymec-dev.travis-ci
#  region: us-west-2
#  skip_cleanup: true
#  local_dir: $HOME/latest
#  upload-dir: polymec-dev
#  acl: public_read

