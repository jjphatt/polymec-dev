# This script generates codename_version.h in the build directory.
import sys, subprocess, re
code_name = sys.argv[1].lower()
CODE_NAME = code_name.upper()
version_number = sys.argv[2]
major_version, minor_version, patch_version = [int(v) for v in version_number.split('.')]
header_file = sys.argv[3]

# Escape characters for use in C strings.
def escape(string):
    return string.translate(str.maketrans({"-":  r"\-",
                                           "]":  r"\]",
                                           "\\": r"\\",
                                           "^":  r"\^",
                                           "$":  r"\$",
                                           "*":  r"\*",
                                           ".":  r"\."}))

# Git revision ID
try:
    git_revision = ' (git revision %s'%subprocess.check_output(['git', 'log', '-1', '--format=format:%h']).strip()
    git_diff = subprocess.check_output(['git', 'diff']).strip()
    num_git_diffs = 0
    skip_dirs = ['cmake/Modules', 'tools/', 'tests/'] # We skip diffs in these directories.
    if (git_diff == ''):
        git_diff = '""'
    else:
        git_diffs = git_diff.split('\n')
        num_diffs = len(git_diffs)
        git_diff = ''
        skip = False
        for i in xrange(num_diffs):
            if git_diffs[i][:4] == 'diff':
                skip = False
                for symbol in skip_dirs:
                    if symbol in git_diffs[i]:
                        skip = True
                        break
            if skip:
                continue
            this_diff = escape(git_diffs[i])
            git_diff += '  \"%s\\n\"'%this_diff
            if i < len(git_diffs)-1:
                git_diff += ',\n'
            num_git_diffs += 1
        git_revision += ', modified'
    git_revision += ')'
except:
    git_revision = ''
    git_diff = '""'
    num_git_diffs = 0
if len(git_diff) == 0: # Handle empty diffs case.
    git_diff = '""'
contents = """
// This file is automagically generated by update_version_h.py.
#ifndef %s_VERSION_H
#define %s_VERSION_H

#define %s_MAJOR_VERSION %i
#define %s_MINOR_VERSION %i
#define %s_PATCH_VERSION %i
static const char* %s_VERSION = "%s%s";
static const char* %s_GIT_DIFFS[] = {\n%s};
static const int %s_NUM_GIT_DIFFS = %d;

#endif
"""%(CODE_NAME, CODE_NAME, CODE_NAME, major_version, CODE_NAME, minor_version, 
     CODE_NAME, patch_version, CODE_NAME, version_number, git_revision, 
     CODE_NAME, git_diff, CODE_NAME, num_git_diffs)

# Does an identical file exist already?
try:
    f = open(header_file, 'r')
    existing_contents = f.read()
    f.close()
except:
    existing_contents = ''

# If not, go ahead and write the new one.
if existing_contents != contents:
    f = open(header_file, 'w')
    f.write(contents)
    f.close()

