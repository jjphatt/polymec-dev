------------------------------------------------------------------------------
Building polytope requires CMake 2.8, found at http://www.cmake.org/, as
well as GNU make. To build polytope on a UNIX-like system, use the following
commands:

     $ make config
     $ make

Polytope also currently requires Boost of at least version >= 1.50.  Boost can
be found at http://www.boost.org/.  Note that we are only using the header only
components of Boost, so it is only necessary to install the header only libraries.

Other make commands
-------------------
   $ make test 
          Runs all tests provided with the polytope library.
   
   $ make clean 
          Removes all object files but retains the configuration options.
   
   $ make distclean 
          Performs clean and completely removes the build directory.

   $ make install
          Installs the polytope headers and libraries in the appropriate places 
          according to the chosen prefix path.

Useful make parameters
----------------------
debug=1
        Turns on debug building and internal contract checking.

MPI=1
        Builds the distributed parallel capabilities of polytope.  Requires that
        an MPI compiler & libraries be available!

CC=<path>
        Explicitly select the C compiler.

CXX=<path>
        Explicitly select the C++ compiler.

CCFLAGS=<stuff>
        Extra flags to throw the C compiler.

CXXFLAGS=<stuff>
        Extra flags to throw the C++ compiler.

prefix=<path>
        Where to put the polytope libraries and headers for make install.

boost_root=<path>
        Explicitly choose the path to the Boost installation.
	If using Boost v1.52 or higher, it additionally searches the associated 
	include	directory for the Boost.Polygon Voronoi library.
	NOTE: Linking issues have been observed when building Polytope with
	      Boost 1.52.0. This is a known bug in Boost and has been
	      addressed in later versions.
              

use_silo=0
        Choose to build with silo file capability (1) or without (0).
        Defaults to 1 if silo can be found.

use_python=1
        Try to build python bindings.  Requires pybindgen installed somewhere in 
        the python search path.

python_exe=<path>
        Explicit path to python executable. Currently assumes a Python directory
	structure of 
	1) <root>/bin for the executable
	2) <root>/include/python<version>/ to find Python.h
	3) <root>/lib/python/ or <root>/lib/python<version>/ to find 
	   libpython<version>.a and site-packages/pybindgen

python_version=2.7
        Set the python version.

build_tests=1
	Set to 0 to skip building the test set. The Polytope tests take up a
	significant portion of the build time. We advise turning build_tests
	off if you only care to install the Polytope library

------------------------------------------------------------------------------
                      O T H E R   C O N S I D E R A T I O N S
------------------------------------------------------------------------------
Polytope provides interfaces for a number of tools:

- Voro++ by Chris Rycroft at LBL
- Triangle by Jonathan Shewchuck at Berkeley
- Tetgen by Hang Si

Support for Triangle and Tetgen is available with minimal effort, but you 
must respect the licenses of their authors and make arrangements with them 
if you want to use them in a commercial application. As a result, we do not 
distribute the source for either of these tools. If you want to build in 
support for Triangle and/or Tetgen, you will need to do the following: 

- For triangle, copy triangle.h and triangle.c to src/.
- For tetgen, copy tetgen.h and tetgen.cxx to src/.

